/*
 *     File Name: proc.c
 *     Description: Process  
 *     Author: iczelion
 *     Email: qomolangmaice@163.com 
 *     Created: 2015.09.02 Wen 21:11:22  
 */

#include "proc.h" 

void TestA(); 
void delay(int time); 

void init_process() 
{
	PROCESS *p_proc = proc_table; 

	p_proc->ldt_sel = SELECTOR_LDT_FIRST; 
	memcpy(&p_proc->ldts[0], &gdt[SELECTOR_KERNEL_CS>>3], sizeof(DESCRIPTOR)); 
	p_proc->ldts[0].attr1 = DA_C | PRIVILEGE_TASK << 5; 
	memcpy(&p_proc->ldts[1], &gdt[SELECTOR_KERNEL_DS>>3], sizeof(DESCRIPTOR)); 
	p_proc->ldts[1].attr1 = DA_DRW | PRIVILEGE_TASK << 5; 

	p_proc->regs.cs = (0 & SA_RPL_MASK & SA_TI_MASK) | SA_TIL | RPL_TASK; 
	p_proc->regs.ds = (8 & SA_RPL_MASK & SA_TI_MASK) | SA_TIL | RPL_TASK; 
	p_proc->regs.fs = (8 & SA_RPL_MASK & SA_TI_MASK) | SA_TIL | RPL_TASK; 
	p_proc->regs.ss = (8 & SA_RPL_MASK & SA_TI_MASK) | SA_TIL | RPL_TASK; 
	p_proc->regs.gs = (8 & SA_RPL_MASK & SA_TI_MASK) | SA_TIL | RPL_TASK; 
	p_proc->regs.eip = (uint32)TestA; 
	p_proc->regs.esp = (uint32) task_stack + STACK_SIZE_TOTAL; 	
	p_proc->regs.eflags = 0x1202;  	 	/* IF, IOPL=1, bit 2 is always 1 */

	p_proc_ready = proc_table; 
	restart(); 	 	/* extern restart (in /boot/boot.s) */ 
}

void TestA()
{
	int i = 0; 
	while(1) 
	{
		print("A"); 
		printf("%d", i++); 
		print("."); 
		delay(1); 
	}
}

void delay(int time) 
{
	int i, j, k; 
	for(k = 0; k < time; k++)
	{
 	 	 for(j = 0; k < 10; k++)
		 {
			 for(j = 0; j < 10000; j++) {} 
		 }
	}
}
